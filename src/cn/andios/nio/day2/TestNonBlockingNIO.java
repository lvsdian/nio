package cn.andios.nio.day2;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.Selector;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.util.Date;
import java.util.Iterator;

/**
 * 一、使用NIO完成网络通信的三个核心：
 * 		1.通道(Channel):负责连接
 * 			java.nio.channels.Channel接口：
 * 				|--SelectableChannel
 * 					|--SocketChannel
 * 					|--ServerSocketChannel
 * 				`	|--DatagramChannel
 * 					
 * 					|--Pipe.SinkChannel
 * 					|--Pipe.SourceChannel
 * 
 * 		2.缓冲区(Buffer):负责数据存取
 * 		3.选择器(Selector):是SelectableChannel的多路复用器，用于监控SelectableChannel的IO状况
 * @author LSD
 *
 */
public class TestNonBlockingNIO {

	public static void main(String[] args) throws IOException{
		//server();
		client();
	}
	
	//客户端
	public static void client() throws IOException{
		//1.获取通道
		SocketChannel socketChannel = SocketChannel.open(new InetSocketAddress("127.0.0.1",9898));
		
		//2.切换非阻塞模式
		socketChannel.configureBlocking(false);
		
		//3.分配指定大小缓冲区
		ByteBuffer byteBuffer = ByteBuffer.allocate(1024);
		
		//4.发送数据给服务端
		byteBuffer.put(new Date().toString().getBytes());
		byteBuffer.flip();
		socketChannel.write(byteBuffer);
		byteBuffer.clear();
		
		
		socketChannel.close();
	}
	
	//服务端
	public static void server() throws IOException{
		//1.获取通道
		ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();
		
		//2.切换非阻塞模式
		serverSocketChannel.configureBlocking(false);
		
		//3.绑定连接
		serverSocketChannel.bind(new InetSocketAddress(9898));
		
		//4.获取选择器
		Selector selector = Selector.open();
		
		//5.将通道注册到选择器上,指定“监听接听事件”
		serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);
		
		//6.轮询式的获取选择器上已经“准备就绪”的事件
		while(selector.select() > 0){
			//7.获取当前选择其中所有注册的“选择键(已就绪的监听事件)”
			Iterator<SelectionKey> iterator = selector.selectedKeys().iterator();
			while(iterator.hasNext()){
				//8.获取准备就绪的是事件
				SelectionKey selectionKey = iterator.next();
				
				//9.判断具体什么事件准备就绪
				if(selectionKey.isAcceptable()){
					//10.若接收就绪,获取客户端连接
					SocketChannel socketChannel = serverSocketChannel.accept();
					
					//11.切换非阻塞模式
					socketChannel.configureBlocking(false);
					
					//12.将该通道注册到选择器上
					socketChannel.register(selector, SelectionKey.OP_READ);
				}else if(selectionKey.isReadable()){
					//13.获取当前连接器
					SocketChannel socketChannel = (SocketChannel)selectionKey.channel();
					
					//14.读取数据
					ByteBuffer byteBuffer = ByteBuffer.allocate(1024);
					
					int len = 0;
					while((len = socketChannel.read(byteBuffer)) >0){
						byteBuffer.flip();
						System.out.println(new String (byteBuffer.array(),0,len));
						byteBuffer.clear();
					}
				}
				//15.取消选择键
				iterator.remove();
			}
		}
	}
}


